// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    Not(in=f, out=isAnd);
    Not(in=isAnd, out=isAdd);

    HalfAdder(a=x[0], b=y[0], sum=s0, carry=c0);
    And(a=isAnd, b=c0, out=and0);
    And(a=isAdd, b=s0, out=add0);
    Or(a=and0, b=add0, out=out[0]);

    FullAdder(a=x[1], b=y[1], c=c0, sum=s1, carry=c1);
    And(a=x[1], b=y[1], out=andResult1);
    And(a=isAnd, b=andResult1, out=and1);
    And(a=isAdd, b=s1, out=add1);
    Or(a=and1, b=add1, out=out[1]);

    FullAdder(a=x[2], b=y[2], c=c1, sum=s2, carry=c2);
    And(a=x[2], b=y[2], out=andResult2);
    And(a=isAnd, b=andResult2, out=and2);
    And(a=isAdd, b=s2, out=add2);
    Or(a=and2, b=add2, out=out[2]);

    FullAdder(a=x[3], b=y[3], c=c2, sum=s3, carry=c3);
    And(a=x[3], b=y[3], out=andResult3);
    And(a=isAnd, b=andResult3, out=and3);
    And(a=isAdd, b=s3, out=add3);
    Or(a=and3, b=add3, out=out[3]);

    FullAdder(a=x[4], b=y[4], c=c3, sum=s4, carry=c4);
    And(a=x[4], b=y[4], out=andResult4);
    And(a=isAnd, b=andResult4, out=and4);
    And(a=isAdd, b=s4, out=add4);
    Or(a=and4, b=add4, out=out[4]);

    FullAdder(a=x[5], b=y[5], c=c4, sum=s5, carry=c5);
    And(a=x[5], b=y[5], out=andResult5);
    And(a=isAnd, b=andResult5, out=and5);
    And(a=isAdd, b=s5, out=add5);
    Or(a=and5, b=add5, out=out[5]);

    FullAdder(a=x[6], b=y[6], c=c5, sum=s6, carry=c6);
    And(a=x[6], b=y[6], out=andResult6);
    And(a=isAnd, b=andResult6, out=and6);
    And(a=isAdd, b=s6, out=add6);
    Or(a=and6, b=add6, out=out[6]);

    FullAdder(a=x[7], b=y[7], c=c6, sum=s7, carry=c7);
    And(a=x[7], b=y[7], out=andResult7);
    And(a=isAnd, b=andResult7, out=and7);
    And(a=isAdd, b=s7, out=add7);
    Or(a=and7, b=add7, out=out[7]);

    FullAdder(a=x[8], b=y[8], c=c7, sum=s8, carry=c8);
    And(a=x[8], b=y[8], out=andResult8);
    And(a=isAnd, b=andResult8, out=and8);
    And(a=isAdd, b=s8, out=add8);
    Or(a=and8, b=add8, out=out[8]);

    FullAdder(a=x[9], b=y[9], c=c8, sum=s9, carry=c9);
    And(a=x[9], b=y[9], out=andResult9);
    And(a=isAnd, b=andResult9, out=and9);
    And(a=isAdd, b=s9, out=add9);
    Or(a=and9, b=add9, out=out[9]);

    FullAdder(a=x[10], b=y[10], c=c9, sum=s10, carry=c10);
    And(a=x[10], b=y[10], out=andResult10);
    And(a=isAnd, b=andResult10, out=and10);
    And(a=isAdd, b=s10, out=add10);
    Or(a=and10, b=add10, out=out[10]);

    FullAdder(a=x[11], b=y[11], c=c10, sum=s11, carry=c11);
    And(a=x[11], b=y[11], out=andResult11);
    And(a=isAnd, b=andResult11, out=and11);
    And(a=isAdd, b=s11, out=add11);
    Or(a=and11, b=add11, out=out[11]);

    FullAdder(a=x[12], b=y[12], c=c11, sum=s12, carry=c12);
    And(a=x[12], b=y[12], out=andResult12);
    And(a=isAnd, b=andResult12, out=and12);
    And(a=isAdd, b=s12, out=add12);
    Or(a=and12, b=add12, out=out[12]);

    FullAdder(a=x[13], b=y[13], c=c12, sum=s13, carry=c13);
    And(a=x[13], b=y[13], out=andResult13);
    And(a=isAnd, b=andResult13, out=and13);
    And(a=isAdd, b=s13, out=add13);
    Or(a=and13, b=add13, out=out[13]);

    FullAdder(a=x[14], b=y[14], c=c13, sum=s14, carry=c14);
    And(a=x[14], b=y[14], out=andResult14);
    And(a=isAnd, b=andResult14, out=and14);
    And(a=isAdd, b=s14, out=add14);
    Or(a=and14, b=add14, out=out[14]);

    // ng
    And(a=x[15], b=y[15], out=bothMinus);
    Xor(a=x[15], b=y[15], out=halfMinus);

    Or(a=bothMinus, b=halfMinus, out=haveMinus);

    And(a=isAnd, b=bothMinus, out=andResult15); // and 조건 이면서 둘 다 minus일때

    And(a=isAdd, b=bothMinus, out=sumMinus);

    And(a=isAdd, b=halfMinus, out=sumHalfMinus);
    And(a=sumHalfMinus, b=c14, out=isPlus);
    Not(in=isPlus, out=isMinus);

    Or(a=sumMinus, b=isMinus, out=addRes); // 둘다 minus 이거나, 하나만 minus인데 carry해서 값이 넘어왔을경우
    And(a=addRes, b=haveMinus, out=addResult15);

    Or(a=andResult15, b=addResult15, out=out[15]);
    Or(a=andResult15, b=addResult15, out=ng);
    // zr
    Or(a=andResult15, b=addResult15, out=zr0);
    Or(a=and0, b=add0, out=zr1);
    Or(a=and1, b=add1, out=zr2);
    Or(a=and2, b=add2, out=zr3);
    Or(a=and3, b=add3, out=zr4);
    Or(a=and4, b=add4, out=zr5);
    Or(a=and5, b=add5, out=zr6);
    Or(a=and6, b=add6, out=zr7);
    Or(a=and7, b=add7, out=zr8);
    Or(a=and8, b=add8, out=zr9);
    Or(a=and9, b=add9, out=zr10);
    Or(a=and10, b=add10, out=zr11);
    Or(a=and11, b=add11, out=zr12);
    Or(a=and12, b=add12, out=zr13);
    Or(a=and13, b=add13, out=zr14);
    Or(a=and14, b=add14, out=zr15);

    Or(a=zr1, b=zr2, out=rs0);
    Or(a=rs0, b=zr3, out=rs1);
    Or(a=rs1, b=zr4, out=rs2);
    Or(a=rs2, b=zr5, out=rs3);
    Or(a=rs3, b=zr6, out=rs4);
    Or(a=rs4, b=zr7, out=rs5);
    Or(a=rs5, b=zr8, out=rs6);
    Or(a=rs6, b=zr9, out=rs7);
    Or(a=rs7, b=zr10, out=rs8);
    Or(a=rs8, b=zr11, out=rs9);
    Or(a=rs9, b=zr12, out=rs10);
    Or(a=rs10, b=zr14, out=rs11);
    Or(a=rs11, b=zr15, out=rs12);
    Or(a=rs12, b=zr0, out=rs13);

    Not(in=rs13, out=zr);
}